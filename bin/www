#!/usr/bin/env node
var app = require('../app');
var debug = require('debug')('server-side:server');
var http = require('http');

var { Server } = require('socket.io');
var setupChatSocket = require('../app/sockets/chat.socket');
const socketService = require('../app/services/common/socket.service');

// Default config
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
var server = http.createServer(app);

// Initialize Socket.io, this should be the sole instance of entire app.
const io = new Server(server, {
  cors: {
    origin: ['http://localhost:5173', 'https://chatoverflow-client.vercel.app'],
    methods: ['GET', 'POST'],
    credentials: true,
  },
});
app.set('io', io);

// Initialize socket for all features
setupChatSocket(io);
socketService.initialize(io);

/* ------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------ */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Socket.IO server running on port ' + port);
}
